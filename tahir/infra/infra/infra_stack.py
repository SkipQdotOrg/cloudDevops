from aws_cdk import core as cdk

# For consistency with other languages, `cdk` is the preferred import name for
# the CDK's core module.  The following line also imports it as `core` for use
# with examples from the CDK Developer's Guide, which are in the process of
# being updated to use `cdk`.  You may delete this import if you don't need it.
from aws_cdk import core
import aws_cdk.aws_lambda as lambda_
import os.path
dirname = os.path.dirname(__file__)
from aws_cdk import core, aws_events, aws_events_targets, aws_iam, aws_cloudwatch


class InfraStack(cdk.Stack):

    def __init__(self, scope: cdk.Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)
        print("dirname=", dirname)
        
        lambda_role = self.create_lambda_role()
        hw_lambda_fn = self.create_lambda('tahir-skipLambda', './resources', 'urls_monitor.handler', lambda_role)
        
        
        # Schedule for scheduled event rules.
        # https://docs.aws.amazon.com/cdk/api/latest/python/aws_cdk.aws_events/Schedule.html
        lambda_schedule = aws_events.Schedule.rate(core.Duration.minutes(1))
        # create the event target
        # https://docs.aws.amazon.com/cdk/api/latest/python/aws_cdk.aws_events_targets/LambdaFunction.html
        event_lambda_target = aws_events_targets.LambdaFunction(handler=hw_lambda_fn)
        # Lastly you bind it all together in an aws_events.Rule
        # https://docs.aws.amazon.com/cdk/api/latest/python/aws_cdk.aws_events/Rule.html
        lambda_cw_event = aws_events.Rule(self, "hw_lambda_rule", description="Periodic Lambda", enabled=True, schedule=lambda_schedule, 
        targets=[event_lambda_target])
        
        
    def create_lambda_role(self):
        # Create a role
        lambdaRole = aws_iam.Role(self, "lambda-role", 
            assumed_by=aws_iam.ServicePrincipal('lambda.amazonaws.com'), 
            managed_policies=[
                                aws_iam.ManagedPolicy.from_aws_managed_policy_name('service-role/AWSLambdaBasicExecutionRole'),
                                aws_iam.ManagedPolicy.from_aws_managed_policy_name('CloudWatchFullAccess')
                                ])
        
        return lambdaRole
        
    def create_lambda(self, id, asset, handler, role):
        print("asset=", os.path.join(dirname, asset))
        return lambda_.Function(self, id,
            # code=lambda_.Code.from_asset(os.path.join(dirname, asset)),
            code=lambda_.Code.asset(asset),
            handler=handler,
            runtime=lambda_.Runtime.PYTHON_3_6,
            # Key-value pairs that Lambda caches and makes available for your Lambda functions.
            environment = {
                "first_name": "Tahir",
                "last_name": "Rauf"
            },
            
            # Lambda functions will use an autogenerated Role if one is not provided.
            role=role,  # Lambda execution role.
        )
        
    def create_alarm(self, namespace, dimensions, metric_name, alarm_id, alarm_name, alarm_description, evaluation_periods, threshold, comparison_operator, treat_missing_data):
        
        metric = aws_cloudwatch.Metric(namespace=namespace, dimensions=dimensions, metric_name=metric_name)
        
        alarm = aws_cloudwatch.Alarm(scope=self, 
                                     id=alarm_id, 
                                     alarm_name=alarm_name,
                                     alarm_description=alarm_description,
                                     metric=metric,
                                     
                                     evaluation_periods=evaluation_periods,
                                     threshold=threshold,
                                     comparison_operator=comparison_operator,
                                     treat_missing_data=treat_missing_data
                                     )
